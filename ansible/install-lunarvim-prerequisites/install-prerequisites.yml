---
- name: Install packages
  gather_facts: false
  hosts: ubuntuNode1
  tasks:
    - name: Update all Debian/Ubuntu packages to their latest version
      ansible.builtin.apt:
        name: "*"
        state: latest
      become: true

    - name: Install make, pip, python ripgrep
      ansible.builtin.apt:
        name:
          - build-essential
          - software-properties-common
          - python3
          - python3-pip
          - ripgrep
          - curl
          - sudo
          - stow
          - zsh
      become: true

    - name: Add git ppa repository
      ansible.builtin.apt_repository:
        repo: ppa:git-core/ppa
      become: true

    - name: Install git
      ansible.builtin.apt:
        update_cache: true
        name: git
      become: true

    # - name: Get latest version tag of nvm
    #   uri:
    #     url: 'https://api.github.com/repos/nvm-sh/nvm/releases/latest'
    #     return_content: yes
    #   register: nvm_release
    #   become: true

    # - set_fact:
    #     nvm_version: "{{ nvm_release.json.tag_name | regex_replace('^v', '') }}"

    # - name: Install nvm
    #   ansible.builtin.shell: >
    #     curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{nvm_version}}/install.sh | bash
    #   args:
    #     creates: "/home/ubuntu/.nvm/nvm.sh"

    - name: Install latest node using nvm
      ansible.builtin.shell:
        cmd: "source /home/ubuntu/.nvm/nvm.sh && nvm install --lts"
      become: true
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: check if cargo is installed
      shell: command -v cargo
      register: cargo_exists
      ignore_errors: true

    - name: Download Rust Installer
      when: cargo_exists is failed
      get_url:
        url: https://sh.rustup.rs
        dest: /tmp/sh.rustup.rs
        mode: '0755'
        force: 'yes'
      tags:
        - rust
      ignore_errors: true

    - name: install rust/cargo
      when: cargo_exists is failed
      shell: /tmp/sh.rustup.rs -y
      tags:
        - rust
      ignore_errors: true

    # - name: Install neovim and tree-sitter using node
    #   ansible.builtin.shell:
    #     cmd: /home/ubuntu/.nvm/versions/node/v20.11.1/bin/node install -g neovim tree-sitter-cli
    #   ignore_errors: true


    # - name: Download pyenv
    #   ansible.builtin.shell:
    #     cmd: 'curl https://pyenv.run | HOME=/home/ubuntu bash'
    #   become: true

    # - name: Add pyenv to path
    #   ansible.builtin.blockinfile:
    #     path: /home/ubuntu/.bashrc
    #     block: |
    #       export PYENV_ROOT="$HOME/.pyenv"
    #       command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    #       eval "$(pyenv init -)"
    #     marker: "\n# {mark} ANSIBLE MANAGED BLOCK pyenv {mark}\n"
    #   become: true
      # ansible.builtin.lineinfile:
      #   path: /home/ubuntu/.bashrc
      #   line: "{{ item }}"
      #   create: yes
      # loop:
      #   - 'echo "export PYENV_ROOT="$HOME/.pyenv"" >> ~/.bashrc'
      #   - 'echo "command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"" >> ~/.bashrc'
      #   - 'echo "eval "$(pyenv init -)"" >> ~/.bashrc'
